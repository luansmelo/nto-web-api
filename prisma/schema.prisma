generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model account_ban_history {
  id         Int      @id @default(autoincrement()) @db.UnsignedInt
  account_id Int
  reason     String   @db.VarChar(255)
  banned_at  BigInt
  expired_at BigInt
  banned_by  Int
  players    players  @relation(fields: [banned_by], references: [id], onDelete: Cascade, map: "account_ban_history_ibfk_2")
  accounts   accounts @relation(fields: [account_id], references: [id], onDelete: Cascade, map: "account_ban_history_ibfk_3")

  @@index([account_id], map: "account_id")
  @@index([account_id], map: "account_id_2")
  @@index([account_id], map: "account_id_3")
  @@index([account_id], map: "account_id_4")
  @@index([banned_by], map: "banned_by")
}

model account_bans {
  account_id Int      @id
  reason     String   @db.VarChar(255)
  banned_at  BigInt
  expires_at BigInt
  banned_by  Int
  accounts   accounts @relation(fields: [account_id], references: [id], onDelete: Cascade, map: "account_bans_ibfk_1")
  players    players  @relation(fields: [banned_by], references: [id], onDelete: Cascade, map: "account_bans_ibfk_2")

  @@index([banned_by], map: "banned_by")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model account_viplist {
  account_id  Int
  player_id   Int
  description String   @default("") @db.VarChar(128)
  icon        Int      @default(0) @db.UnsignedTinyInt
  notify      Boolean  @default(false)
  accounts    accounts @relation(fields: [account_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "account_viplist_ibfk_1")
  players     players  @relation(fields: [player_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "account_viplist_ibfk_2")

  @@unique([account_id, player_id], map: "account_player_index")
  @@index([account_id], map: "account_id")
  @@index([player_id], map: "player_id")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model accounts {
  id                  Int                   @id @default(autoincrement())
  name                String                @unique(map: "name") @db.VarChar(32)
  password            String                @db.Char(40)
  secret              String?               @db.Char(16)
  type                Int                   @default(1)
  premdays            Int                   @default(0)
  coins               Int                   @default(0)
  lastday             Int                   @default(0) @db.UnsignedInt
  email               String                @default("") @db.VarChar(255)
  creation            Int                   @default(0)
  vote                Int                   @default(0)
  key                 String                @default("") @db.VarChar(64)
  blocked             Boolean               @default(false)
  created             Int                   @default(0)
  email_new           String                @default("") @db.VarChar(255)
  email_new_time      Int                   @default(0)
  rlname              String                @default("") @db.VarChar(255)
  location            String                @default("") @db.VarChar(255)
  country             String                @default("") @db.VarChar(3)
  web_lastlogin       Int                   @default(0)
  web_flags           Int                   @default(0)
  email_hash          String                @default("") @db.VarChar(32)
  email_verified      Boolean               @default(false)
  page_access         Int                   @default(0)
  email_code          String                @default("") @db.VarChar(255)
  email_next          Int                   @default(0)
  premium_points      Int                   @default(0)
  create_date         Int                   @default(0)
  create_ip           Int                   @default(0)
  last_post           Int                   @default(0)
  flag                String                @default("") @db.VarChar(80)
  vip_time            Int                   @default(0)
  guild_points        Int                   @default(0)
  guild_points_stats  Int                   @default(0)
  account_ban_history account_ban_history[]
  account_bans        account_bans?
  account_viplist     account_viplist[]
  players             players[]
  store_history       store_history[]       @ignore
}

model announcements {
  id     Int    @id @default(autoincrement())
  title  String @db.VarChar(50)
  text   String @db.VarChar(255)
  date   String @db.VarChar(20)
  author String @db.VarChar(50)
}

model global_storage {
  key   String @unique(map: "key") @db.VarChar(32)
  value String @db.Text
}

model guild_invites {
  player_id Int     @default(0)
  guild_id  Int     @default(0)
  players   players @relation(fields: [player_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "guild_invites_ibfk_1")
  guilds    guilds  @relation(fields: [guild_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "guild_invites_ibfk_2")

  @@id([player_id, guild_id])
  @@index([guild_id], map: "guild_id")
}

model guild_membership {
  player_id   Int         @id
  guild_id    Int
  rank_id     Int
  nick        String      @default("") @db.VarChar(15)
  players     players     @relation(fields: [player_id], references: [id], onDelete: Cascade, map: "guild_membership_ibfk_1")
  guilds      guilds      @relation(fields: [guild_id], references: [id], onDelete: Cascade, map: "guild_membership_ibfk_2")
  guild_ranks guild_ranks @relation(fields: [rank_id], references: [id], onDelete: Cascade, map: "guild_membership_ibfk_3")

  @@index([guild_id], map: "guild_id")
  @@index([rank_id], map: "rank_id")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model guild_ranks {
  id               Int                @id @default(autoincrement())
  guild_id         Int
  name             String             @db.VarChar(255)
  level            Int
  guild_membership guild_membership[]
  guilds           guilds             @relation(fields: [guild_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "guild_ranks_ibfk_1")

  @@index([guild_id], map: "guild_id")
}

model guild_wars {
  id               Int               @id @default(autoincrement())
  guild1           Int               @default(0)
  guild2           Int               @default(0)
  name1            String            @db.VarChar(255)
  name2            String            @db.VarChar(255)
  status           Int               @default(0) @db.TinyInt
  started          BigInt            @default(0)
  ended            BigInt            @default(0)
  guildwar_kills   guildwar_kills[]
  znote_guild_wars znote_guild_wars?

  @@index([guild1], map: "guild1")
  @@index([guild2], map: "guild2")
}

model guilds {
  id                  Int                @id @default(autoincrement())
  name                String             @unique(map: "name") @db.VarChar(255)
  ownerid             Int                @unique(map: "ownerid")
  creationdata        Int
  motd                String             @default("") @db.VarChar(255)
  description         String             @db.Text
  guild_logo          Bytes?             @db.MediumBlob
  create_ip           Int                @default(0)
  balance             BigInt             @default(0) @db.UnsignedBigInt
  last_execute_points Int                @default(0)
  logo_name           String             @default("default.gif") @db.VarChar(255)
  guild_invites       guild_invites[]
  guild_membership    guild_membership[]
  guild_ranks         guild_ranks[]
  players             players            @relation(fields: [ownerid], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "guilds_ibfk_1")
}

model guildwar_kills {
  id          Int        @id @default(autoincrement())
  killer      String     @db.VarChar(50)
  target      String     @db.VarChar(50)
  killerguild Int        @default(0)
  targetguild Int        @default(0)
  warid       Int        @default(0)
  time        BigInt
  guild_wars  guild_wars @relation(fields: [warid], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "guildwar_kills_ibfk_1")

  @@index([warid], map: "warid")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model house_lists {
  house_id Int
  listid   Int
  list     String @db.Text
  houses   houses @relation(fields: [house_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "house_lists_ibfk_1")

  @@index([house_id], map: "house_id")
  @@ignore
}

model houses {
  id             Int           @id @default(autoincrement())
  owner          Int
  paid           Int           @default(0) @db.UnsignedInt
  warnings       Int           @default(0)
  name           String        @db.VarChar(255)
  rent           Int           @default(0)
  town_id        Int           @default(0)
  bid            Int           @default(0)
  bid_end        Int           @default(0)
  last_bid       Int           @default(0)
  highest_bidder Int           @default(0)
  size           Int           @default(0)
  beds           Int           @default(0)
  house_lists    house_lists[] @ignore
  tile_store     tile_store[]  @ignore

  @@index([owner], map: "owner")
  @@index([town_id], map: "town_id")
}

model ip_bans {
  ip         Int     @id @db.UnsignedInt
  reason     String  @db.VarChar(255)
  banned_at  BigInt
  expires_at BigInt
  banned_by  Int
  players    players @relation(fields: [banned_by], references: [id], onDelete: Cascade, map: "ip_bans_ibfk_1")

  @@index([banned_by], map: "banned_by")
}

model live_casts {
  player_id   Int     @unique(map: "player_id_2")
  cast_name   String  @db.VarChar(255)
  password    Boolean @default(false)
  description String? @db.VarChar(255)
  spectators  Int?    @default(0) @db.SmallInt
  players     players @relation(fields: [player_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "live_casts_ibfk_1")
}

model market_history {
  id         Int     @id @default(autoincrement()) @db.UnsignedInt
  player_id  Int
  sale       Boolean @default(false)
  itemtype   Int     @db.UnsignedInt
  amount     Int     @db.UnsignedSmallInt
  price      Int     @default(0) @db.UnsignedInt
  expires_at BigInt  @db.UnsignedBigInt
  inserted   BigInt  @db.UnsignedBigInt
  state      Boolean
  players    players @relation(fields: [player_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "market_history_ibfk_1")

  @@index([player_id, sale], map: "player_id")
}

model market_offers {
  id        Int     @id @default(autoincrement()) @db.UnsignedInt
  player_id Int
  sale      Boolean @default(false)
  itemtype  Int     @db.UnsignedInt
  amount    Int     @db.UnsignedSmallInt
  created   BigInt  @db.UnsignedBigInt
  anonymous Boolean @default(false)
  price     Int     @default(0) @db.UnsignedInt
  players   players @relation(fields: [player_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "market_offers_ibfk_1")

  @@index([created], map: "created")
  @@index([player_id], map: "player_id")
  @@index([sale, itemtype], map: "sale")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model myaac_account_actions {
  account_id Int
  ip         Int    @default(0) @db.UnsignedInt
  ipv6       Bytes  @default(dbgenerated("0\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000")) @db.Binary(16)
  date       Int    @default(0)
  action     String @default("") @db.VarChar(255)

  @@index([account_id], map: "account_id")
  @@ignore
}

model myaac_admin_menu {
  id       Int    @id @default(autoincrement())
  name     String @default("") @db.VarChar(255)
  page     String @default("") @db.VarChar(255)
  ordering Int    @default(0)
  flags    Int    @default(0)
  enabled  Int    @default(1)
}

model myaac_bugtracker {
  account String @db.VarChar(255)
  type    Int    @default(0)
  status  Int    @default(0)
  text    String @db.Text
  id      Int    @default(0)
  subject String @default("") @db.VarChar(255)
  reply   Int    @default(0)
  who     Int    @default(0)
  uid     Int    @id @default(autoincrement())
  tag     Int    @default(0)
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model myaac_changelog {
  id        Int     @id @default(autoincrement())
  body      String  @default("") @db.VarChar(500)
  type      Boolean @default(false)
  where     Boolean @default(false)
  date      Int     @default(0)
  player_id Int     @default(0)
  hidden    Boolean @default(false)
}

model myaac_config {
  id    Int    @id @default(autoincrement())
  name  String @unique(map: "name") @db.VarChar(30)
  value String @db.VarChar(1000)
}

model myaac_faq {
  id       Int     @id @default(autoincrement())
  question String  @default("") @db.VarChar(255)
  answer   String  @default("") @db.VarChar(1020)
  ordering Int     @default(0)
  hidden   Boolean @default(false)
}

model myaac_forum {
  id            Int     @id @default(autoincrement())
  first_post    Int     @default(0)
  last_post     Int     @default(0)
  section       Int     @default(0)
  replies       Int     @default(0)
  views         Int     @default(0)
  author_aid    Int     @default(0)
  author_guid   Int     @default(0)
  post_text     String  @db.Text
  post_topic    String  @default("") @db.VarChar(255)
  post_smile    Boolean @default(false)
  post_html     Boolean @default(false)
  post_date     Int     @default(0)
  last_edit_aid Int     @default(0)
  edit_date     Int     @default(0)
  post_ip       String  @default("0.0.0.0") @db.VarChar(32)
  sticked       Boolean @default(false)
  closed        Boolean @default(false)

  @@index([section], map: "section")
}

model myaac_forum_boards {
  id          Int     @id @default(autoincrement())
  name        String  @db.VarChar(32)
  description String  @default("") @db.VarChar(255)
  ordering    Int     @default(0)
  guild       Int     @default(0)
  access      Int     @default(0)
  closed      Boolean @default(false)
  hidden      Boolean @default(false)
}

model myaac_gallery {
  id       Int     @id @default(autoincrement())
  comment  String  @default("") @db.VarChar(255)
  image    String  @db.VarChar(255)
  thumb    String  @db.VarChar(255)
  author   String  @default("") @db.VarChar(50)
  ordering Int     @default(0)
  hidden   Boolean @default(false)
}

model myaac_menu {
  id       Int     @id @default(autoincrement())
  template String  @db.VarChar(255)
  name     String  @db.VarChar(255)
  link     String  @db.VarChar(255)
  blank    Boolean @default(false)
  color    String  @default("") @db.VarChar(6)
  category Int     @default(1)
  ordering Int     @default(0)
  enabled  Int     @default(1)
}

model myaac_monsters {
  id               Int     @id @default(autoincrement())
  hidden           Boolean @default(false)
  name             String  @db.VarChar(255)
  mana             Int     @default(0)
  exp              Int
  health           Int
  speed_lvl        Int     @default(1)
  use_haste        Boolean
  voices           String  @db.Text
  immunities       String  @db.VarChar(255)
  elements         String  @db.Text
  summonable       Boolean
  convinceable     Boolean
  pushable         Boolean @default(false)
  canpushitems     Boolean @default(false)
  canwalkonenergy  Boolean @default(false)
  canwalkonpoison  Boolean @default(false)
  canwalkonfire    Boolean @default(false)
  runonhealth      Boolean @default(false)
  hostile          Boolean @default(false)
  attackable       Boolean @default(false)
  rewardboss       Boolean @default(false)
  defense          Int     @default(0)
  armor            Int     @default(0)
  canpushcreatures Boolean @default(false)
  race             String  @db.VarChar(255)
  loot             String  @db.Text
  summons          String  @db.Text
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model myaac_news {
  id                 Int     @id @default(autoincrement())
  title              String  @db.VarChar(100)
  body               String  @db.Text
  type               Boolean @default(false)
  date               Int     @default(0)
  category           Boolean @default(false)
  player_id          Int     @default(0)
  last_modified_by   Int     @default(0)
  last_modified_date Int     @default(0)
  comments           String  @default("") @db.VarChar(50)
  article_text       String  @default("") @db.VarChar(300)
  article_image      String  @default("") @db.VarChar(100)
  hidden             Boolean @default(false)
}

model myaac_news_categories {
  id          Int     @id @default(autoincrement())
  name        String  @default("") @db.VarChar(50)
  description String  @default("") @db.VarChar(50)
  icon_id     Int     @default(0)
  hidden      Boolean @default(false)
}

model myaac_notepad {
  id         Int    @id @default(autoincrement())
  account_id Int
  content    String @db.Text
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model myaac_pages {
  id             Int     @id @default(autoincrement())
  name           String  @unique(map: "name") @db.VarChar(30)
  title          String  @db.VarChar(30)
  body           String  @db.Text
  date           Int     @default(0)
  player_id      Int     @default(0)
  php            Boolean @default(false)
  enable_tinymce Boolean @default(true)
  access         Int     @default(0) @db.TinyInt
  hidden         Boolean @default(false)
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model myaac_spells {
  id            Int     @id @default(autoincrement())
  spell         String  @default("") @db.VarChar(255)
  name          String  @unique(map: "name") @db.VarChar(255)
  words         String  @default("") @db.VarChar(255)
  category      Boolean @default(false)
  type          Boolean @default(false)
  level         Int     @default(0)
  maglevel      Int     @default(0)
  mana          Int     @default(0)
  soul          Int     @default(0) @db.TinyInt
  conjure_id    Int     @default(0)
  conjure_count Int     @default(0) @db.TinyInt
  reagent       Int     @default(0)
  item_id       Int     @default(0)
  premium       Boolean @default(false)
  vocations     String  @default("") @db.VarChar(100)
  hidden        Boolean @default(false)
}

model myaac_videos {
  id         Int     @id @default(autoincrement())
  title      String  @default("") @db.VarChar(100)
  youtube_id String  @db.VarChar(20)
  author     String  @default("") @db.VarChar(50)
  ordering   Int     @default(0)
  hidden     Boolean @default(false)
}

model myaac_visitors {
  ip        String @unique(map: "ip") @db.VarChar(16)
  lastvisit Int    @default(0)
  page      String @db.VarChar(2048)
}

model myaac_weapons {
  id        Int    @id
  level     Int    @default(0)
  maglevel  Int    @default(0)
  vocations String @default("") @db.VarChar(100)
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model player_deaths {
  player_id              Int
  time                   BigInt  @default(0) @db.UnsignedBigInt
  level                  Int     @default(1)
  killed_by              String  @db.VarChar(255)
  is_player              Boolean @default(true)
  mostdamage_by          String  @db.VarChar(100)
  mostdamage_is_player   Boolean @default(false)
  unjustified            Boolean @default(false)
  mostdamage_unjustified Boolean @default(false)
  players                players @relation(fields: [player_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "player_deaths_ibfk_1")

  @@index([killed_by], map: "killed_by")
  @@index([mostdamage_by], map: "mostdamage_by")
  @@index([player_id], map: "player_id")
  @@ignore
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model player_depotitems {
  player_id  Int
  sid        Int
  pid        Int     @default(0)
  itemtype   Int     @db.SmallInt
  count      Int     @default(0) @db.SmallInt
  attributes Bytes   @db.Blob
  players    players @relation(fields: [player_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "player_depotitems_ibfk_1")

  @@unique([player_id, sid], map: "player_id_2")
}

model player_inboxitems {
  player_id  Int
  sid        Int
  pid        Int     @default(0)
  itemtype   Int     @db.SmallInt
  count      Int     @default(0) @db.SmallInt
  attributes Bytes   @db.Blob
  players    players @relation(fields: [player_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "player_inboxitems_ibfk_1")

  @@unique([player_id, sid], map: "player_id_2")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model player_items {
  player_id  Int     @default(0)
  pid        Int     @default(0)
  sid        Int     @default(0)
  itemtype   Int     @default(0) @db.SmallInt
  count      Int     @default(0) @db.SmallInt
  attributes Bytes   @db.Blob
  players    players @relation(fields: [player_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "player_items_ibfk_1")

  @@index([player_id], map: "player_id")
  @@index([sid], map: "sid")
  @@ignore
}

model player_namelocks {
  player_id                                       Int     @id
  reason                                          String  @db.VarChar(255)
  namelocked_at                                   BigInt
  namelocked_by                                   Int
  players_player_namelocks_player_idToplayers     players @relation("player_namelocks_player_idToplayers", fields: [player_id], references: [id], onDelete: Cascade, map: "player_namelocks_ibfk_1")
  players_player_namelocks_namelocked_byToplayers players @relation("player_namelocks_namelocked_byToplayers", fields: [namelocked_by], references: [id], onDelete: Cascade, map: "player_namelocks_ibfk_2")

  @@index([namelocked_by], map: "namelocked_by")
}

model player_rewards {
  player_id  Int
  sid        Int
  pid        Int     @default(0)
  itemtype   Int     @db.SmallInt
  count      Int     @default(0) @db.SmallInt
  attributes Bytes   @db.Blob
  players    players @relation(fields: [player_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "player_rewards_ibfk_1")

  @@unique([player_id, sid], map: "player_id_2")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model player_spells {
  player_id Int
  name      String  @db.VarChar(255)
  players   players @relation(fields: [player_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "player_spells_ibfk_1")

  @@index([player_id], map: "player_id")
  @@ignore
}

model player_storage {
  player_id Int     @default(0)
  key       Int     @default(0) @db.UnsignedInt
  value     Int     @default(0)
  players   players @relation(fields: [player_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "player_storage_ibfk_1")

  @@id([player_id, key])
}

model players {
  id                                                       Int                   @id @default(autoincrement())
  name                                                     String                @unique(map: "name") @db.VarChar(255)
  group_id                                                 Int                   @default(1)
  account_id                                               Int                   @default(0)
  level                                                    Int                   @default(1)
  vocation                                                 Int                   @default(0)
  health                                                   Int                   @default(150)
  healthmax                                                Int                   @default(150)
  experience                                               BigInt                @default(0)
  lookbody                                                 Int                   @default(0)
  lookfeet                                                 Int                   @default(0)
  lookhead                                                 Int                   @default(0)
  looklegs                                                 Int                   @default(0)
  looktype                                                 Int                   @default(136)
  lookaddons                                               Int                   @default(0)
  maglevel                                                 Int                   @default(0)
  mana                                                     Int                   @default(0)
  manamax                                                  Int                   @default(0)
  manaspent                                                Int                   @default(0) @db.UnsignedInt
  soul                                                     Int                   @default(0) @db.UnsignedInt
  town_id                                                  Int                   @default(0)
  posx                                                     Int                   @default(0)
  posy                                                     Int                   @default(0)
  posz                                                     Int                   @default(0)
  conditions                                               Bytes                 @db.Blob
  cap                                                      Int                   @default(0)
  sex                                                      Int                   @default(0)
  lastlogin                                                BigInt                @default(0) @db.UnsignedBigInt
  lastip                                                   Int                   @default(0) @db.UnsignedInt
  save                                                     Boolean               @default(true)
  skull                                                    Boolean               @default(false)
  skulltime                                                Int                   @default(0)
  lastlogout                                               BigInt                @default(0) @db.UnsignedBigInt
  blessings                                                Int                   @default(0) @db.TinyInt
  onlinetime                                               Int                   @default(0)
  deletion                                                 BigInt                @default(0)
  balance                                                  BigInt                @default(0) @db.UnsignedBigInt
  offlinetraining_time                                     Int                   @default(43200) @db.UnsignedSmallInt
  offlinetraining_skill                                    Int                   @default(-1)
  stamina                                                  Int                   @default(2520) @db.UnsignedSmallInt
  skill_fist                                               Int                   @default(10) @db.UnsignedInt
  skill_fist_tries                                         BigInt                @default(0) @db.UnsignedBigInt
  skill_club                                               Int                   @default(10) @db.UnsignedInt
  skill_club_tries                                         BigInt                @default(0) @db.UnsignedBigInt
  skill_sword                                              Int                   @default(10) @db.UnsignedInt
  skill_sword_tries                                        BigInt                @default(0) @db.UnsignedBigInt
  skill_axe                                                Int                   @default(10) @db.UnsignedInt
  skill_axe_tries                                          BigInt                @default(0) @db.UnsignedBigInt
  skill_dist                                               Int                   @default(10) @db.UnsignedInt
  skill_dist_tries                                         BigInt                @default(0) @db.UnsignedBigInt
  skill_shielding                                          Int                   @default(10) @db.UnsignedInt
  skill_shielding_tries                                    BigInt                @default(0) @db.UnsignedBigInt
  skill_fishing                                            Int                   @default(10) @db.UnsignedInt
  skill_fishing_tries                                      BigInt                @default(0) @db.UnsignedBigInt
  deleted                                                  Boolean               @default(false)
  description                                              String                @default("") @db.VarChar(255)
  comment                                                  String                @db.Text
  create_ip                                                Int                   @default(0)
  create_date                                              Int                   @default(0)
  hidden                                                   Boolean               @default(false)
  cast                                                     Boolean               @default(false)
  skill_critical_hit_chance_tries                          BigInt                @default(0) @db.UnsignedBigInt
  skill_critical_hit_damage                                Int                   @default(0) @db.UnsignedInt
  skill_critical_hit_damage_tries                          BigInt                @default(0) @db.UnsignedBigInt
  skill_life_leech_chance                                  Int                   @default(0) @db.UnsignedInt
  skill_life_leech_chance_tries                            BigInt                @default(0) @db.UnsignedBigInt
  skill_life_leech_amount                                  Int                   @default(0) @db.UnsignedInt
  skill_life_leech_amount_tries                            BigInt                @default(0) @db.UnsignedBigInt
  skill_mana_leech_chance                                  Int                   @default(0) @db.UnsignedInt
  skill_mana_leech_chance_tries                            BigInt                @default(0) @db.UnsignedBigInt
  skill_mana_leech_amount                                  Int                   @default(0) @db.UnsignedInt
  skill_mana_leech_amount_tries                            BigInt                @default(0) @db.UnsignedBigInt
  skill_criticalhit_chance_tries                           BigInt                @default(0) @db.UnsignedBigInt
  skill_criticalhit_damage                                 Int                   @default(0) @db.UnsignedInt
  skill_criticalhit_damage_tries                           BigInt                @default(0) @db.UnsignedBigInt
  skill_criticalhit_chance                                 BigInt                @default(0) @db.UnsignedBigInt
  skill_lifeleech_chance                                   BigInt                @default(0) @db.UnsignedBigInt
  skill_manaleech_chance                                   BigInt                @default(0) @db.UnsignedBigInt
  skill_lifeleech_amount                                   Int                   @default(0) @db.UnsignedInt
  skill_manaleech_amount                                   Int                   @default(0) @db.UnsignedInt
  marriage_status                                          Int                   @default(0) @db.TinyInt
  skill_critical_hit_chance                                Int                   @default(0) @db.UnsignedInt
  created                                                  Int                   @default(0)
  account_ban_history                                      account_ban_history[]
  account_bans                                             account_bans[]
  account_viplist                                          account_viplist[]
  guild_invites                                            guild_invites[]
  guild_membership                                         guild_membership?
  guilds                                                   guilds?
  ip_bans                                                  ip_bans[]
  live_casts                                               live_casts?
  market_history                                           market_history[]
  market_offers                                            market_offers[]
  player_deaths                                            player_deaths[]       @ignore
  player_depotitems                                        player_depotitems[]
  player_inboxitems                                        player_inboxitems[]
  player_items                                             player_items[]        @ignore
  player_namelocks_player_namelocks_player_idToplayers     player_namelocks?     @relation("player_namelocks_player_idToplayers")
  player_namelocks_player_namelocks_namelocked_byToplayers player_namelocks[]    @relation("player_namelocks_namelocked_byToplayers")
  player_rewards                                           player_rewards[]
  player_spells                                            player_spells[]       @ignore
  player_storage                                           player_storage[]
  accounts                                                 accounts              @relation(fields: [account_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "players_ibfk_1")

  @@index([account_id], map: "account_id")
  @@index([vocation], map: "vocation")
}

model players_online {
  player_id Int @id
}

model server_config {
  config String @id @db.VarChar(50)
  value  String @default("") @db.VarChar(256)
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model store_history {
  account_id  Int
  mode        Int      @default(0) @db.SmallInt
  description String   @db.VarChar(3500)
  coin_amount Int
  time        BigInt   @db.UnsignedBigInt
  accounts    accounts @relation(fields: [account_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "store_history_ibfk_1")

  @@index([account_id], map: "account_id")
  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model tile_store {
  house_id Int
  data     Bytes
  houses   houses @relation(fields: [house_id], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "tile_store_ibfk_1")

  @@index([house_id], map: "house_id")
  @@ignore
}

model videos {
  id        Int    @id @default(autoincrement())
  titulo    String @db.VarChar(255)
  descricao String @db.Text
  categoria Int
  link      String @db.VarChar(11)
  ativo     Int    @default(1)
}

model videos_categorias {
  id   Int    @id @default(autoincrement())
  nome String @db.VarChar(255)
}

model videos_comentarios {
  id        Int      @id @default(autoincrement())
  mensagem  String   @db.Text
  character String   @db.VarChar(255)
  ip        String   @db.VarChar(15)
  topico    Int
  data      DateTime @default(now()) @db.Timestamp(0)
  ativo     Int      @default(1)
}

model z_forum {
  id            Int     @id @default(autoincrement())
  first_post    Int     @default(0)
  last_post     Int     @default(0)
  section       Int     @default(0)
  replies       Int     @default(0)
  views         Int     @default(0)
  author_aid    Int     @default(0)
  author_guid   Int     @default(0)
  post_text     String  @db.Text
  post_topic    String  @db.VarChar(255)
  post_smile    Boolean @default(false)
  post_html     Boolean @default(false)
  post_date     Int     @default(0)
  last_edit_aid Int     @default(0)
  edit_date     Int     @default(0)
  post_ip       String  @default("0.0.0.0") @db.VarChar(15)
  icon_id       Int     @default(0)
  sticked       Boolean @default(false)
  closed        Boolean @default(false)

  @@index([section], map: "section")
}

model z_network_box {
  id           Int    @id @default(autoincrement())
  network_name String @db.VarChar(10)
  network_link String @db.VarChar(50)
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model z_news_tickers {
  date        Int     @default(1)
  author      Int
  image_id    Int     @default(0)
  text        String  @db.Text
  hide_ticker Boolean

  @@ignore
}

model z_ots_comunication {
  id        Int    @id @default(autoincrement())
  name      String @db.VarChar(255)
  type      String @db.VarChar(255)
  action    String @db.VarChar(255)
  param1    String @db.VarChar(255)
  param2    String @db.VarChar(255)
  param3    String @db.VarChar(255)
  param4    String @db.VarChar(255)
  param5    String @db.VarChar(255)
  param6    String @db.VarChar(255)
  param7    String @db.VarChar(255)
  delete_it Int    @default(1)
}

model z_ots_guildcomunication {
  id        Int    @id @default(autoincrement())
  name      String @db.VarChar(255)
  type      String @db.VarChar(255)
  action    String @db.VarChar(255)
  param1    String @db.VarChar(255)
  param2    String @db.VarChar(255)
  param3    String @db.VarChar(255)
  param4    String @db.VarChar(255)
  param5    String @db.VarChar(255)
  param6    String @db.VarChar(255)
  param7    String @db.VarChar(255)
  delete_it Int    @default(1)
}

model z_polls {
  id        Int    @id @default(autoincrement())
  question  String @db.VarChar(255)
  end       Int
  start     Int
  answers   Int
  votes_all Int
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model z_polls_answers {
  poll_id   Int
  answer_id Int
  answer    String @db.VarChar(255)
  votes     Int

  @@ignore
}

model z_shop_history_item {
  id           Int    @id @default(autoincrement())
  to_name      String @default("0") @db.VarChar(255)
  to_account   Int    @default(0)
  from_nick    String @db.VarChar(255)
  from_account Int    @default(0)
  price        Int    @default(0)
  offer_id     String @default("") @db.VarChar(255)
  trans_state  String @db.VarChar(255)
  trans_start  Int    @default(0)
  trans_real   Int    @default(0)
}

model z_shop_offer {
  id                Int     @id @default(autoincrement())
  points            Int     @default(0)
  itemid1           Int     @default(0)
  count1            Int     @default(0)
  itemid2           Int     @default(0)
  count2            Int     @default(0)
  offer_type        String? @db.VarChar(255)
  offer_description String  @db.Text
  offer_name        String  @db.VarChar(255)
  offer_category    Int
  offer_new         Int
  pid               Int     @default(0)
}

model z_shopguild_history_item {
  id           Int    @id @default(autoincrement())
  to_name      String @default("0") @db.VarChar(255)
  to_account   Int    @default(0)
  from_nick    String @db.VarChar(255)
  from_account Int    @default(0)
  price        Int    @default(0)
  offer_id     Int    @default(0)
  trans_state  String @db.VarChar(255)
  trans_start  Int    @default(0)
  trans_real   Int    @default(0)
}

model z_shopguild_history_pacc {
  id           Int    @id @default(autoincrement())
  to_name      String @default("0") @db.VarChar(255)
  to_account   Int    @default(0)
  from_nick    String @db.VarChar(255)
  from_account Int    @default(0)
  price        Int    @default(0)
  pacc_days    Int    @default(0)
  trans_state  String @db.VarChar(255)
  trans_start  Int    @default(0)
  trans_real   Int    @default(0)
}

model z_shopguild_offer {
  id                Int     @id @default(autoincrement())
  points            Int     @default(0)
  itemid1           Int     @default(0)
  count1            Int     @default(0)
  itemid2           Int     @default(0)
  count2            Int     @default(0)
  offer_type        String? @db.VarChar(255)
  offer_description String  @db.Text
  offer_name        String  @db.VarChar(255)
  pid               Int     @default(0)
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model znote {
  id        Int    @id @default(autoincrement())
  version   String @db.VarChar(30)
  installed Int
  cached    Int?
}

model znote_accounts {
  id         Int     @id @default(autoincrement())
  account_id Int
  ip         Int     @db.UnsignedInt
  created    Int
  points     Int?    @default(0)
  cooldown   Int?    @default(0)
  active     Int     @default(0) @db.TinyInt
  activekey  Int     @default(0)
  flag       String  @db.VarChar(20)
  secret     String? @db.Char(16)
}

model znote_changelog {
  id        Int    @id @default(autoincrement())
  text      String @db.VarChar(255)
  time      Int
  report_id Int
  status    Int    @default(0) @db.TinyInt
}

model znote_deleted_characters {
  id                  Int      @id @default(autoincrement())
  original_account_id Int
  character_name      String   @db.VarChar(255)
  time                DateTime @db.DateTime(0)
  done                Boolean
}

model znote_forum {
  id       Int    @id @default(autoincrement())
  name     String @db.VarChar(50)
  access   Int    @db.TinyInt
  closed   Int    @db.TinyInt
  hidden   Int    @db.TinyInt
  guild_id Int
}

model znote_forum_posts {
  id          Int    @id @default(autoincrement())
  thread_id   Int
  player_id   Int
  player_name String @db.VarChar(50)
  text        String @db.Text
  created     Int
  updated     Int
}

model znote_forum_threads {
  id          Int    @id @default(autoincrement())
  forum_id    Int
  player_id   Int
  player_name String @db.VarChar(50)
  title       String @db.VarChar(50)
  text        String @db.Text
  created     Int
  updated     Int
  sticky      Int    @db.TinyInt
  hidden      Int    @db.TinyInt
  closed      Int    @db.TinyInt
}

model znote_global_storage {
  key   String @unique(map: "key") @db.VarChar(32)
  value String @db.Text
}

model znote_guild_wars {
  id         Int        @id @default(autoincrement())
  limit      Int        @default(0)
  guild_wars guild_wars @relation(fields: [id], references: [id], onDelete: Cascade, map: "znote_guild_wars_ibfk_1")
}

model znote_images {
  id         Int    @id @default(autoincrement())
  title      String @db.VarChar(30)
  desc       String @db.Text
  date       Int
  status     Int
  image      String @db.VarChar(30)
  account_id Int
}

model znote_news {
  id    Int    @id @default(autoincrement())
  title String @db.VarChar(30)
  text  String @db.Text
  date  Int
  pid   Int
}

model znote_paygol {
  id         Int    @id @default(autoincrement())
  account_id Int
  price      Int
  points     Int
  message_id String @db.VarChar(255)
  service_id String @db.VarChar(255)
  shortcode  String @db.VarChar(255)
  keyword    String @db.VarChar(255)
  message    String @db.VarChar(255)
  sender     String @db.VarChar(255)
  operator   String @db.VarChar(255)
  country    String @db.VarChar(255)
  currency   String @db.VarChar(255)
}

model znote_paypal {
  id     Int    @id @default(autoincrement())
  txn_id String @db.VarChar(30)
  email  String @db.VarChar(255)
  accid  Int
  price  Int
  points Int
}

model znote_player_reports {
  id                 Int    @id @default(autoincrement())
  name               String @db.VarChar(50)
  posx               Int
  posy               Int
  posz               Int
  report_description String @db.VarChar(255)
  date               Int
  status             Int    @default(0) @db.TinyInt
}

model znote_players {
  id        Int    @id @default(autoincrement())
  player_id Int
  created   Int
  hide_char Int    @db.TinyInt
  comment   String @db.VarChar(255)
}

model znote_shop {
  id          Int    @id @default(autoincrement())
  type        Int
  itemid      Int?
  count       Int    @default(1)
  description String @db.VarChar(255)
  points      Int    @default(10)
}

model znote_shop_logs {
  id         Int @id @default(autoincrement())
  account_id Int
  player_id  Int
  type       Int
  itemid     Int
  count      Int
  points     Int
  time       Int
}

model znote_shop_orders {
  id         Int @id @default(autoincrement())
  account_id Int
  type       Int
  itemid     Int
  count      Int
  time       Int @default(0)
}

model znote_tickets {
  id       Int    @id @default(autoincrement())
  owner    Int
  username String @db.VarChar(32)
  subject  String @db.Text
  message  String @db.Text
  ip       Int
  creation Int
  status   String @db.VarChar(20)
}

model znote_tickets_replies {
  id       Int    @id @default(autoincrement())
  tid      Int
  username String @db.VarChar(32)
  message  String @db.Text
  created  Int
}

model znote_visitors {
  id    Int @id @default(autoincrement())
  ip    Int
  value Int
}

model znote_visitors_details {
  id         Int @id @default(autoincrement())
  ip         Int
  time       Int
  type       Int @db.TinyInt
  account_id Int
}
